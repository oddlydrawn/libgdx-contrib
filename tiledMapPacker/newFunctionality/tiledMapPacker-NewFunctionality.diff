diff --git a/CHANGES b/CHANGES
index 4f64a13..4c6385a 100755
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,6 @@
+[1.6.1]
+- TiledMapPacker outputs one texture atlas per map with default settings, options changed
+
 [1.6.0]
 - API Change: GlyphLayout xAdvances now have an additional entry at the beginning. This was required to implement tighter text bounds. #3034
 - API Change: Label#getTextBounds changed to getGlyphLayout. This exposes all the runs, not just the width and height.
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
index cc91949..af22043 100644
--- a/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPacker.java
@@ -88,20 +88,35 @@ public class TiledMapPacker {
 	private static final String TilesetsOutputDir = "tileset";
 
 	// the generate atlas' name
-	private static final String AtlasOutputName = "packed";
+	// changes to map name sans ext when --combine-tilesets isn't used
+	private static String AtlasOutputName = "packed";
 
 	// a map tracking tileids usage for any given tileset, across multiple maps
+	// a new one is created with each map when --combine-tilesets isn't used
 	private HashMap<String, IntArray> tilesetUsedIds = new HashMap<String, IntArray>();
 
+	static File inputDir;
+	static File outputDir;
+	FileHandle currentDir;
+	ObjectMap<String, TiledMapTileSet> tilesetsToPack;
+
 	private static class TmxFilter implements FilenameFilter {
 		public TmxFilter () {
 		}
 
 		@Override
 		public boolean accept (File dir, String name) {
-			if (name.endsWith(".tmx")) return true;
+			return (name.endsWith(".tmx"));
+		}
+	}
+
+	private static class DirFilter implements FilenameFilter {
+		public DirFilter () {
+		}
 
-			return false;
+		@Override
+		public boolean accept (File f, String s) {
+			return (new File(f, s).isDirectory());
 		}
 	}
 
@@ -135,74 +150,123 @@ public class TiledMapPacker {
 	 * Process a directory containing TMX map files representing Tiled maps and produce a single TextureAtlas as well as new
 	 * processed TMX map files, correctly referencing the generated {@link TextureAtlas} by using the "atlas" custom map property.
 	 * 
-	 * Typically, your maps will lie in a directory, such as "maps/" and your tilesets in a subdirectory such as "maps/city": this
-	 * layout will ensure that MapEditor will reference your tileset with a very simple relative path and no parent directory
-	 * names, such as "..", will ever happen in your TMX file definition avoiding much of the confusion caused by the preprocessor
-	 * working with relative paths.
-	 * 
 	 * <strong>WARNING!</strong> Use caution if you have a "../" in the path of your tile sets! The output for these tile sets will
 	 * be relative to the output directory. For example, if your output directory is "C:\mydir\maps" and you have a tileset with
-	 * the path "../tileset.png", the tileset will be output to "C:\mydir\" and the maps will be in "C:\mydir\maps".
+	 * the path "../tileset.png", the tileset will be output to "C:\mydir\" and the maps will be in "C:\mydir\maps". Note: This no
+	 * longer seems to be the case now that tilesets are generated per map. However, more testing is needed.
 	 * 
 	 * @param inputDir the input directory containing the tmx files (and tile sets, relative to the path listed in the tmx file)
 	 * @param outputDir The output directory for the TMX files, <strong>should be empty before running</strong>.
 	 * @param settings the settings used in the TexturePacker */
 	public void processMaps (File inputDir, File outputDir, Settings settings) throws IOException {
-		FileHandle inputDirHandle = new FileHandle(inputDir.getAbsolutePath());
-		File[] files = inputDir.listFiles(new TmxFilter());
-		ObjectMap<String, TiledMapTileSet> tilesetsToPack = new ObjectMap<String, TiledMapTileSet>();
-
-		for (File file : files) {
-			map = mapLoader.load(file.getAbsolutePath());
-
-			// if enabled, build a list of used tileids for the tileset used by this map
-			if (this.settings.stripUnusedTiles) {
-				int mapWidth = map.getProperties().get("width", Integer.class);
-				int mapHeight = map.getProperties().get("height", Integer.class);
-				int numlayers = map.getLayers().getCount();
-				int bucketSize = mapWidth * mapHeight * numlayers;
-
-				Iterator<MapLayer> it = map.getLayers().iterator();
-				while (it.hasNext()) {
-					MapLayer layer = it.next();
-
-					// some layers can be plain MapLayer instances (ie. object groups), just ignore them
-					if (layer instanceof TiledMapTileLayer) {
-						TiledMapTileLayer tlayer = (TiledMapTileLayer)layer;
-
-						for (int y = 0; y < mapHeight; ++y) {
-							for (int x = 0; x < mapWidth; ++x) {
-								if (tlayer.getCell(x, y) != null) {
-									TiledMapTile tile = tlayer.getCell(x, y).getTile();
-									if (tile instanceof AnimatedTiledMapTile) {
-										AnimatedTiledMapTile aTile = (AnimatedTiledMapTile)tile;
-										for (StaticTiledMapTile t : aTile.getFrameTiles()) {
-											addTile(t, bucketSize, tilesetsToPack);
-										}
+		FileHandle inputDirHandle = new FileHandle(inputDir.getCanonicalPath());
+		File[] mapFilesInCurrentDir = inputDir.listFiles(new TmxFilter());
+		FilenameFilter dirFilter = new DirFilter();
+		tilesetsToPack = new ObjectMap<String, TiledMapTileSet>();
+
+		// Processes the maps inside inputDir
+		for (File mapFile : mapFilesInCurrentDir) {
+			processSingleMap(mapFile, inputDirHandle, settings);
+		}
+
+		processSubdirectories(inputDirHandle, settings);
+
+		boolean combineTilesets = this.settings.combineTilesets;
+		if (combineTilesets == true) {
+			packTilesets(tilesetsToPack, inputDirHandle, outputDir, settings);
+		}
+	}
+
+	/** Looks for subdirectories inside parentHandle. Processes maps in each subdirectory. Repeat.
+	 * @param parentHandle The directory to look for maps and other directories
+	 * @param settings TexturePacker.Settings settings
+	 * @throws IOException */
+	private void processSubdirectories (FileHandle parentHandle, Settings settings) throws IOException {
+		File parentPath = new File(parentHandle.path());
+		File[] directories = parentPath.listFiles(new DirFilter());
+
+		for (File directory : directories) {
+			currentDir = new FileHandle(directory.getCanonicalPath());
+			File[] mapFilesInCurrentDir = directory.listFiles(new TmxFilter());
+
+			for (File mapFile : mapFilesInCurrentDir) {
+				processSingleMap(mapFile, currentDir, settings);
+			}
+
+			processSubdirectories(currentDir, settings);
+		}
+	}
+
+	/** @param mapFile File mapFile
+	 * @param inputDirHandle FileHandle inputDirHandle
+	 * @param settings Texturepacker.Settings settings
+	 * @throws IOException */
+	private void processSingleMap (File mapFile, FileHandle inputDirHandle, Settings settings) throws IOException {
+
+		boolean combineTilesets = this.settings.combineTilesets;
+		if (combineTilesets == false) {
+			tilesetUsedIds = new HashMap<String, IntArray>();
+			tilesetsToPack = new ObjectMap<String, TiledMapTileSet>();
+		}
+
+		map = mapLoader.load(mapFile.getCanonicalPath());
+
+		// if enabled, build a list of used tileids for the tileset used by this map
+		if (this.settings.stripUnusedTiles) {
+			int mapWidth = map.getProperties().get("width", Integer.class);
+			int mapHeight = map.getProperties().get("height", Integer.class);
+			int numlayers = map.getLayers().getCount();
+			int bucketSize = mapWidth * mapHeight * numlayers;
+
+			Iterator<MapLayer> it = map.getLayers().iterator();
+			while (it.hasNext()) {
+				MapLayer layer = it.next();
+
+				// some layers can be plain MapLayer instances (ie. object groups), just ignore them
+				if (layer instanceof TiledMapTileLayer) {
+					TiledMapTileLayer tlayer = (TiledMapTileLayer)layer;
+
+					for (int y = 0; y < mapHeight; ++y) {
+						for (int x = 0; x < mapWidth; ++x) {
+							if (tlayer.getCell(x, y) != null) {
+								TiledMapTile tile = tlayer.getCell(x, y).getTile();
+								if (tile instanceof AnimatedTiledMapTile) {
+									AnimatedTiledMapTile aTile = (AnimatedTiledMapTile)tile;
+									for (StaticTiledMapTile t : aTile.getFrameTiles()) {
+										addTile(t, bucketSize, tilesetsToPack);
 									}
-									// Adds non-animated tiles and the base animated tile
-									addTile(tile, bucketSize, tilesetsToPack);
 								}
+								// Adds non-animated tiles and the base animated tile
+								addTile(tile, bucketSize, tilesetsToPack);
 							}
 						}
 					}
 				}
-			} else {
-				for (TiledMapTileSet tileset : map.getTileSets()) {
-					String tilesetName = tileset.getName();
-					if (!tilesetsToPack.containsKey(tilesetName)) {
-						tilesetsToPack.put(tilesetName, tileset);
-					}
+			}
+		} else {
+			for (TiledMapTileSet tileset : map.getTileSets()) {
+				String tilesetName = tileset.getName();
+				if (!tilesetsToPack.containsKey(tilesetName)) {
+					tilesetsToPack.put(tilesetName, tileset);
 				}
 			}
+		}
+
+		if (combineTilesets == false) {
+			FileHandle tmpHandle = new FileHandle(mapFile.getName());
+			this.settings.atlasOutputName = tmpHandle.nameWithoutExtension();
 
-			FileHandle tmxFile = new FileHandle(file.getAbsolutePath());
-			writeUpdatedTMX(map, outputDir, tmxFile);
+			packTilesets(tilesetsToPack, inputDirHandle, outputDir, settings);
 		}
 
-		packTilesets(tilesetsToPack, inputDirHandle, outputDir, settings);
+		FileHandle tmxFile = new FileHandle(mapFile.getCanonicalPath());
+		writeUpdatedTMX(map, outputDir, tmxFile);
 	}
 
+	/** Adds a TiledMapTile to tilesetsToPack
+	 * @param tile TiledMapTile tile
+	 * @param bucketSize int bucketSize
+	 * @param tilesetsToPack ObjectMap<String, TiledMapTileSet> tilesetsToPack */
 	private void addTile (TiledMapTile tile, int bucketSize, ObjectMap<String, TiledMapTileSet> tilesetsToPack) {
 		int tileid = tile.getId() & ~0xE0000000;
 		String tilesetName = tilesetNameFromTileId(map, tileid);
@@ -263,11 +327,13 @@ public class TiledMapPacker {
 		Vector2 tileLocation;
 		TileSetLayout packerTileSet;
 		Graphics g;
+		boolean verbose = this.settings.verbose;
 
 		packer = new TexturePacker(texturePackerSettings);
 
 		for (TiledMapTileSet set : sets.values()) {
 			String tilesetName = set.getName();
+			//if (verbose) System.out.println("Processing tileset " + tilesetName);
 			System.out.println("Processing tileset " + tilesetName);
 			IntArray usedIds = this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName, -1) : null;
 
@@ -280,7 +346,7 @@ public class TiledMapPacker {
 
 			for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) {
 				if (usedIds != null && !usedIds.contains(gid)) {
-					System.out.println("Stripped id #" + gid + " from tileset \"" + tilesetName + "\"");
+					if (verbose) System.out.println("Stripped id #" + gid + " from tileset \"" + tilesetName + "\"");
 					continue;
 				}
 
@@ -292,8 +358,10 @@ public class TiledMapPacker {
 					+ tileWidth, (int)tileLocation.y + tileHeight, null);
 
 				if (isBlended(tile)) setBlended(gid);
-				System.out.println("Adding " + tileWidth + "x" + tileHeight + " (" + (int)tileLocation.x + ", " + (int)tileLocation.y
-					+ ")");
+				if (verbose) {
+					System.out.println("Adding " + tileWidth + "x" + tileHeight + " (" + (int)tileLocation.x + ", "
+						+ (int)tileLocation.y + ")");
+				}
 				packer.addImage(tile, this.settings.atlasOutputName + "_" + (gid - 1));
 			}
 		}
@@ -464,17 +532,13 @@ public class TiledMapPacker {
 		}
 	}
 
-	static File inputDir;
-	static File outputDir;
-
 	/** Processes a directory of Tile Maps, compressing each tile set contained in any map once.
 	 * 
 	 * @param args args[0]: the input directory containing the tmx files (and tile sets, relative to the path listed in the tmx
 	 *           file). args[1]: The output directory for the tmx files, should be empty before running. WARNING: Use caution if
 	 *           you have a "../" in the path of your tile sets! The output for these tile sets will be relative to the output
 	 *           directory. For example, if your output directory is "C:\mydir\output" and you have a tileset with the path
-	 *           "../tileset.png", the tileset will be output to "C:\mydir\" and the maps will be in "C:\mydir\output". args[2]:
-	 *           --strip-unused (optional, include to let the TiledMapPacker remove tiles which are not used. */
+	 *           "../tileset.png", the tileset will be output to "C:\mydir\" and the maps will be in "C:\mydir\output". */
 	public static void main (String[] args) {
 		final Settings texturePackerSettings = new Settings();
 		texturePackerSettings.paddingX = 2;
@@ -487,29 +551,19 @@ public class TiledMapPacker {
 
 		final TiledMapPackerSettings packerSettings = new TiledMapPackerSettings();
 
-		switch (args.length) {
-		case 3: {
+		if (args.length == 0) {
+			printUsage();
+			System.exit(0);
+		} else if (args.length == 1) {
 			inputDir = new File(args[0]);
-			outputDir = new File(args[1]);
-			if ("--strip-unused".equals(args[2])) {
-				packerSettings.stripUnusedTiles = true;
-			}
-			break;
-		}
-		case 2: {
+			outputDir = new File(inputDir, "../output/");
+		} else if (args.length == 2) {
 			inputDir = new File(args[0]);
 			outputDir = new File(args[1]);
-			break;
-		}
-		case 1: {
+		} else {
 			inputDir = new File(args[0]);
-			outputDir = new File(inputDir, "output/");
-			break;
-		}
-		default: {
-			System.out.println("Usage: INPUTDIR [OUTPUTDIR] [--strip-unused]");
-			System.exit(0);
-		}
+			outputDir = new File(args[1]);
+			processExtraArgs(args, packerSettings, texturePackerSettings);
 		}
 
 		TiledMapPacker packer = new TiledMapPacker(packerSettings);
@@ -545,6 +599,7 @@ public class TiledMapPacker {
 				TiledMapPacker packer = new TiledMapPacker(packerSettings);
 
 				if (!inputDir.exists()) {
+					System.out.println(inputDir.getAbsolutePath());
 					throw new RuntimeException("Input directory does not exist: " + inputDir);
 				}
 
@@ -554,13 +609,55 @@ public class TiledMapPacker {
 					throw new RuntimeException("Error processing map: " + e.getMessage());
 				}
 
+				System.out.println("Finished processing.");
 				Gdx.app.exit();
 			}
 		}, config);
+
+	}
+
+	private static void processExtraArgs (String[] args, TiledMapPackerSettings packerSettings, Settings texturePackerSettings) {
+		int length = args.length - 2;
+		String[] argsNotDir = new String[length];
+		System.arraycopy(args, 2, argsNotDir, 0, length);
+
+		for (String string : argsNotDir) {
+			if ("--include-unused".equals(string)) {
+				// This option takes way too long
+				packerSettings.stripUnusedTiles = false;
+			} else if ("--combine-tilesets".equals(string)) {
+				// This option has problems with tileset location
+				packerSettings.combineTilesets = true;
+			} else if ("-v".equals(string)) {
+				packerSettings.verbose = true;
+			} else {
+				System.out.println("\nOption \"" + string + "\" not recognized.\n");
+				printUsage();
+				System.exit(0);
+			}
+		}
+	}
+
+	private static void printUsage () {
+		System.out.println("Usage: INPUTDIR [OUTPUTDIR] [--include-unused] [--combine-tilesets] [-v]");
+		System.out.println("Processes a directory of Tiled .tmx maps. Unable to process XML encoded tmx");
+		System.out.println("maps. Problems processing or loading tilesets with different tile size from");
+		System.out.println("those specified in the map.\n");
+		System.out.println("  --include-unused           creates a tileset with every tile, not just");
+		System.out.println("                             the used tiles. This can take a long time.");
+		System.out.println("  --combine-tilesets         instead of creating a tileset for each map,");
+		System.out.println("                             this combines the tilesets into some kind");
+		System.out.println("                             of monster tileset. Has problems with tileset");
+		System.out.println("                             location. Has problems with nested folders.");
+		System.out.println("                             Not recommended.");
+		System.out.println("  -v                         outputs which tiles are stripped and included");
+		System.out.println();
 	}
 
 	public static class TiledMapPackerSettings {
-		public boolean stripUnusedTiles = false;
+		public boolean stripUnusedTiles = true;
+		public boolean combineTilesets = false;
+		public boolean verbose = false;
 		public String tilesetOutputDirectory = TilesetsOutputDir;
 		public String atlasOutputName = AtlasOutputName;
 	}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTest.java b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTest.java
new file mode 100644
index 0000000..79d45c1
--- /dev/null
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTest.java
@@ -0,0 +1,74 @@
+/*******************************************************************************
+ * Copyright 2015 See AUTHORS file.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.tiledmappacker;
+
+/** Processes the maps located in gdx-tests-android: "assets/data/maps/tiled-atlas-src" Creates the directory
+ * "assets/data/maps/tiled-atlas-processed/deleteMe" which contains processed maps. Run TiledMapPackerTestRender to render the
+ * maps and, optionally, delete the created folder on exit. */
+public class TiledMapPackerTest {
+
+	// TestTypes "NoArgs" and "BadOption" do not create/process maps.
+	public enum TestType {
+		NoArgs, DefaultUsage, Verbose, IncludeUnused, CombineTilesets, UnusedAndCombine, BadOption
+	}
+
+	public static void main (String[] args) throws Exception {
+		String path = "../../tests/gdx-tests-android/assets/data/maps/";
+		String input = path + "tiled-atlas-src";
+		String output = path + "tiled-atlas-processed/deleteMe";
+		String verboseOpt = "-v";
+		String unused = "--include-unused";
+		String combine = "--combine-tilesets";
+		String badOpt = "bad";
+
+		TestType testType = TestType.DefaultUsage;
+
+		String[] noArgs = {};
+		String[] defaultUsage = {input, output};
+		String[] verbose = {input, output, verboseOpt};
+		String[] includeUnused = {input, output, unused};
+		String[] combineTilesets = {input, output, combine};
+		String[] unusedAndCombine = {input, output, unused, combine};
+		String[] badOption = {input, output, unused, verboseOpt, combine, badOpt};
+
+		switch (testType) {
+		case NoArgs:
+			TiledMapPacker.main(noArgs);
+			break;
+		case DefaultUsage:
+			TiledMapPacker.main(defaultUsage);
+			break;
+		case Verbose:
+			TiledMapPacker.main(verbose);
+			break;
+		case IncludeUnused:
+			TiledMapPacker.main(includeUnused);
+			break;
+		case CombineTilesets:
+			TiledMapPacker.main(combineTilesets);
+			break;
+		case UnusedAndCombine:
+			TiledMapPacker.main(unusedAndCombine);
+			break;
+		case BadOption:
+			TiledMapPacker.main(badOption);
+			break;
+		default:
+			break;
+		}
+	}
+}
diff --git a/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTestRender.java b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTestRender.java
new file mode 100644
index 0000000..571de7a
--- /dev/null
+++ b/extensions/gdx-tools/src/com/badlogic/gdx/tiledmappacker/TiledMapPackerTestRender.java
@@ -0,0 +1,101 @@
+/*******************************************************************************
+ * Copyright 2015 See AUTHORS file.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.tiledmappacker;
+
+import com.badlogic.gdx.ApplicationAdapter;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Input.Keys;
+import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
+import com.badlogic.gdx.backends.lwjgl.LwjglApplication;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.OrthographicCamera;
+import com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader;
+import com.badlogic.gdx.maps.tiled.TiledMap;
+import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
+import com.badlogic.gdx.utils.viewport.FitViewport;
+import com.badlogic.gdx.utils.viewport.Viewport;
+
+/** Renders and, optionally, deletes maps processed by TiledMapPackerTest. Run TiledMapPackerTest before running this */
+public class TiledMapPackerTestRender extends ApplicationAdapter {
+	final boolean DELETE_DELETEME_FOLDER_ON_EXIT = true;
+
+	final String PATH = "../../tests/gdx-tests-android/assets/data/maps/tiled-atlas-processed/deleteMe/";
+	final String MAP = "test.tmx";
+	final String TMX_LOC = PATH + MAP;
+	final boolean CENTER_CAM = false;
+	final float WORLD_WIDTH = 32;
+	final float WORLD_HEIGHT = 18;
+	final float PIXELS_PER_METER = 32;
+	final float UNIT_SCALE = 1f / PIXELS_PER_METER;
+	AtlasTmxMapLoader.AtlasTiledMapLoaderParameters params;
+	AtlasTmxMapLoader atlasTmxMapLoader;
+	TiledMap map;
+	Viewport viewport;
+	OrthogonalTiledMapRenderer mapRenderer;
+	OrthographicCamera cam;
+
+	@Override
+	public void create () {
+		atlasTmxMapLoader = new AtlasTmxMapLoader(new InternalFileHandleResolver());
+		params = new AtlasTmxMapLoader.AtlasTiledMapLoaderParameters();
+
+		params.generateMipMaps = false;
+		params.convertObjectToTileSpace = false;
+		params.flipY = true;
+
+		viewport = new FitViewport(WORLD_WIDTH, WORLD_HEIGHT);
+		cam = (OrthographicCamera)viewport.getCamera();
+
+		map = atlasTmxMapLoader.load(TMX_LOC, params);
+		mapRenderer = new OrthogonalTiledMapRenderer(map, UNIT_SCALE);
+	}
+
+	@Override
+	public void render () {
+		Gdx.gl.glClearColor(0.5f, 0, 0, 1f);
+		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+
+		viewport.apply();
+		mapRenderer.setView(cam);
+		mapRenderer.render();
+
+		if (Gdx.input.isKeyPressed(Keys.ESCAPE)) {
+			if (DELETE_DELETEME_FOLDER_ON_EXIT) {
+				FileHandle handle = Gdx.files.local(PATH);
+				handle.deleteDirectory();
+			}
+
+			dispose();
+			Gdx.app.exit();
+		}
+	}
+
+	@Override
+	public void resize (int width, int height) {
+		viewport.update(width, height, CENTER_CAM);
+	}
+
+	@Override
+	public void dispose () {
+		map.dispose();
+	}
+
+	public static void main (String[] args) throws Exception {
+		new LwjglApplication(new TiledMapPackerTestRender(), "", 640, 480);
+	}
+}
